This is the beggining of my updated game engine.

2025

25 jan
-Created project SandCastle.

July

18

-Decided to copy dependencies into the project (no submodules).
-build folders
-added distrib config
-decided to keep include the same way it was.

24

-built all the dependencies
-progress on migration
-progress on build config (done ?)

26

-progress on migration to sdl3 entt latest

27

-rebuilt imgui to include sdl3
-addressed some warnings.
-created Test project
-completed build!
-fixed linking problems (project references...)
-fixed (?)  ENTT_ASSERT (still need to test in case of real failure)
-created a window with no bugs!
-decided to keep singleton (bc the only point I see is to avoid user doing shit before he calls Engine::Init)


28

-.gitignore
-first commit/push!
-draw sprite test success.
-removed useless defines
-imgui no longer available in distrib
-camera default constructor updated to match comon use case
-systems have its own default camera
-systems init
-have a camera by default in the init
-entity create for easily created animated sprite or sprite
-tested entity create

29

-removed pch.h in Files.h
-renamed "Add..Input" to "Bind..Input"
-input test
-begginer friendly tests
-renamed header

>find how to trigger an entt assertion and see if it properly logs and breaks
>check Time operator*(const Time& l, const Time& r) warning problem by testing
>check if there's not an event infinite loop for window resize
>test the difference between; SDL_EVENT_WINDOW_PIXEL_SIZE_CHANGED
and SDL_EVENT_WINDOW_RESIZED, and determine how to use them in the proper way
>mouse namespace
>migrate box2D 3
>change namespace SandCastle for SandCastle
>include GUI stuff (translate UI position to game world and so forth)
>multi pass rendering for layers instead of the current system (one component can be used as the layer struct Layer1 struct Layer2...)
>materials
>make new attempt at threaded rendering
>text input (SDL_StartTextInput...)
>Implement LoveAudio from idle colony as a default audio system
>Implement steamworks from idle colony
>Implement a default GameSystem class inspired from the pattern in IdleColony
>Complete UI system
>Particle system
>Transform animation system

>rotation Math::VecToAngle/VecToAngle should match with Transform rotation
>camera, make near and far plane customizable
>InputSystem.h should be in Input folder and part of Input.h
>add capacity of receiving an intelligible string from an input for it's binding, either controller or m&k, and what version (default 0)
>m_listeners (signalsender) shouldn't be a multi set but a set, to not allow multiple time listening with the same callabck;
>Serialized: HadGetError, HadParseError, IsNull, (currently HadGetError is merged with HadGetError)
>Serialized, Get error must propagate to all parents