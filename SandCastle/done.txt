This is the beggining of my updated game engine.

2025

25 jan
-Created project SandCastle.

July

18

-Decided to copy dependencies into the project (no submodules).
-build folders
-added distrib config
-decided to keep include the same way it was.

24

-built all the dependencies
-progress on migration
-progress on build config (done ?)

26

-progress on migration to sdl3 entt latest

27

-rebuilt imgui to include sdl3
-addressed some warnings.
-created Test project
-completed build!
-fixed linking problems (project references...)
-fixed (?)  ENTT_ASSERT (still need to test in case of real failure)
-created a window with no bugs!
-decided to keep singleton (bc the only point I see is to avoid user doing shit before he calls Engine::Init)


28

-.gitignore
-first commit/push!
-draw sprite test success.
-removed useless defines
-imgui no longer available in distrib
-camera default constructor updated to match comon use case
-systems have its own default camera
-systems init
-have a camera by default in the init
-entity create for easily created animated sprite or sprite
-tested entity create

29

-removed pch.h in Files.h
-renamed "Add..Input" to "Bind..Input"
-input test
-begginer friendly tests
-renamed header
-rotations and vector directions are now coherent
-removed time operator % / * cause they make no sense for duration and * was making a recursive call
-created Geometry namespace and moved the approriate funciton there

30

-Entt assertion break and logging correctly
-Test distrib build without console (this involved changing linker advanced settings to configure the entry point )
-Improved serialized error message
-moved input system
-changed order of glBindFrameBuffer and glViewport bc apparently there was a mistake
-find out pixel/point size is the same regardless of windows scaling factor (at least on my machine)
-fire only one resize signal when pixel size change (not when only window size change, but they always trigger both)
-couldn't figure what the point size could be used for
-therefore using only the pixel size for everything.
-window event test
-Gamepad, mouse, key namespace

>Serialized: HadGetError, HadParseError, IsNull, (currently HadGetError is merged with HadParseError)
>Serialized: "ResetGetError()"
>Serialized: bool TryGet
>Serialized, Get error must propagate to all parents


>migrate box2D 3
>include GUI stuff (translate UI position to game world and so forth)
>improve redering (see redering section)
>text input (SDL_StartTextInput...)
>Implement LoveAudio from idle colony as a default audio system
>audio spacialization
>Implement steamworks from idle colony
>Implement a default GameSystem class inspired from the pattern in IdleColony
>Complete UI system
>Particle system
>Transform animation system

>add capacity of receiving an intelligible string from an input for it's binding, either controller or m&k, and what version (default 0)
>m_listeners (signalsender) shouldn't be a multi set but a set, to not allow multiple time listening with the same callabck;


Redering:

>multi pass rendering for layers instead of the current system (one component can be used as the layer struct Layer1 struct Layer2...)
>materials
>make new attempt at threaded rendering

for multi threaded rendering, try copying all the components needed for rendering.

Thoughts:

>Transform rotation should loop at 360/-360? Because we could potentially break the float limit.
But I'm not happy with the additional processing required, so I'm letting the user do that if they want.

UI:

>start by managing fonts (create texture, or set of textures, for font in one size)
>